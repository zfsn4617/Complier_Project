#include "tree.h"
int nodeCount;
void TreeNode::addChild(TreeNode* child) {
    if (this->child == nullptr)
        this->child = child;
    else
    {
        TreeNode* temp = this->child;
        while (temp->sibling != nullptr)
            temp = temp->sibling;
        temp->sibling = child;
    }
}

void TreeNode::addSibling(TreeNode* sibling) {
    TreeNode* temp = this;
    while (temp->sibling != nullptr)
        temp = temp->sibling;
    temp->sibling = sibling;
}

TreeNode::TreeNode(int lineno, NodeType type) {
    this->lineno = lineno;
    this->nodeType = type;
}

void TreeNode::genNodeId() {
    nodeID = nodeCount;
    nodeCount++;
    if (child != nullptr)
        child->genNodeId();
    if (sibling != nullptr)
        sibling->genNodeId();
}

void TreeNode::printNodeInfo() {
    switch (nodeType)
    {
    case NODE_CONST:
        cout << "const\t";
        break;
    case NODE_VAR:
        cout << "variable\t";
        break;
    case NODE_EXPR:
        cout << "expression\t";
        break;
    case NODE_TYPE:
        cout << "type\t";
        break;
    case NODE_ASSIGN:
        cout << "assign\t";
        break;
    case NODE_STMT:
        cout << "statement\t";
        break;
    case NODE_PROG:
        cout << "program\t";
        break;
    case NODE_SIGN:
        cout << "sign\t";
        break;
    case NODE_OP:
        cout << "operator\t";
        break;
    case NODE_KEY:
        cout << "key\t";
        break;
    default:
        cout << "unknown\t";
        break;
    }
    printChildrenId();
    printSpecialInfo();
    cout << endl;
}

void TreeNode::printChildrenId() {
    TreeNode* temp = nullptr;
    if (child == nullptr)
        return;
    if (child != nullptr)
        temp = child;
    cout << "children:[";
    while (temp != nullptr)
    {
        cout << "@" << temp->nodeID << " ";
        temp = temp->sibling;
    }
    cout << "\t] ";
}

void TreeNode::printAST() {
    cout << "Ino@" << lineno << "\t" << "@" << nodeID << "\t";
    printNodeInfo();
    if (child != nullptr)
        child->printAST();
    if (sibling != nullptr)
        sibling->printAST();
}


// You can output more info...
void TreeNode::printSpecialInfo() {
    switch (this->nodeType) {
    case NODE_CONST:
        if (type != nullptr)
        {
            if (type == TYPE_INT)
                cout << "type:int";
            else if (type == TYPE_BOOL)
                cout << "type:bool";
            else if (type == TYPE_STRING)
                cout << "type:string";
            else if (type == TYPE_CHAR)
                cout << "type:char";
            else
                cout<<"type:unknown";
        }
        break;
    case NODE_VAR:
        cout << "varname:" << var_name;
        break;
    case NODE_EXPR:
        break;
    case NODE_STMT:
        if (stype != 0)
        {
            switch (stype)
            {
            case STMT_SKIP:
                cout << "stmt:skip";
                break;
            case STMT_DECL:
                cout << "stmt:decl";
                break;
            case STMT_ASSIGN:
                cout << "stmt:assign";
                break;
            case STMT_EXPR:
                cout << "stmt:expr";
                break;
            case STMT_IF:
                cout << "stmt:if";
                break;
            case STMT_FOR:
                cout << "stmt:for";
                break;
            case STMT_WHILE:
                cout << "stmt:while";
                break;
            case STMT_RETURN:
                cout << "stmt:return";
                break;
            case STMT_BLOCK:
                cout << "stmt:block";
                break;
            default:
                cout << "unknown";
            }
        }
        break;
    case NODE_TYPE:
        if (type != nullptr)
        {
            if (type == TYPE_INT)
                cout << "type:int";
            else if (type == TYPE_BOOL)
                cout << "type:bool";
            else if (type == TYPE_STRING)
                cout << "type:string";
            else if (type == TYPE_CHAR)
                cout << "type:char";
        }
        break;
    default:
        break;
    }
}

string TreeNode::sType2String(StmtType type) {
    return "?";
}


string TreeNode::nodeType2String(NodeType type) {
    return "<>";
}

string TreeNode::opType2String(OperatorType type) {
    return "+";
}

